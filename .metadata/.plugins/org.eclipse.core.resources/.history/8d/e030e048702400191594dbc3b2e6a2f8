package com.quickr.userconsumer.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.discovery.EurekaClient;

public class UserConsControllerSample {
	@CrossOrigin(origins="http://localhost:4008")
	@RestController
	public class UserConsumerController {
		@Autowired
		private EurekaClient client;
		
		@Autowired
		private RestTemplate restTemplate;
		
		
		@Bean
		@LoadBalanced
		public RestTemplate restTemplate() {
			return new RestTemplate();
		}
}


		
	@Autowired
	private RestTemplateBuilder restTemplateBuilder;
	
	
	
	//VALIDATING USER DETAILS BY EMAILID AND PASSWORD USING POJO OBJECT
	

	@PostMapping("/quickr/validate")
	public boolean validateUser(@RequestBody UserLoginAccount userLoginAccount) {
		System.out.println(userLoginAccount);
		RestTemplate restTemplate = restTemplateBuilder.build();
		
		String baseUrl = getUserBaseUrl();
		ResponseEntity<List<UserRegistrationAccount>> response =
				restTemplate.exchange(baseUrl+"/getallusers", HttpMethod.GET, null,new ParameterizedTypeReference<List<UserRegistrationAccount>>() {});
System.out.println(response.getBody());
		List<UserRegistrationAccount> users=response.getBody();
		for (UserRegistrationAccount user : users) {
			if(user.getEmail().equals(userLoginAccount.getEmail()) && user.getPassword().equals(userLoginAccount.getPassword())) {
				return true;
			}
		}
		return false;
	}
	
	
	@PostMapping("/quickr/register")
	public UserRegistrationAccount addUser(@RequestBody UserRegistrationAccount account) {
		System.out.println(account);
		 HttpHeaders headers = new HttpHeaders();
	      headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	      HttpEntity<UserRegistrationAccount> entity = new HttpEntity<UserRegistrationAccount>(account,headers);
	      RestTemplate restTemplate = restTemplateBuilder.build();
			String baseUrl = getUserBaseUrl();
	       restTemplate.exchange(
	    		  baseUrl +"/register", HttpMethod.POST, entity, String.class).getBody();	
	       return account;
	}

	
	
	
	@GetMapping("/show")
	public String show() {
		
		RestTemplate restTemplate = restTemplateBuilder.build();
		String baseUrl = getUserBaseUrl();
		System.out.println(baseUrl);
		ResponseEntity<String> response =
		restTemplate.exchange(baseUrl+"/show", HttpMethod.GET, null,String.class);
		System.out.println(response.getBody());//user producer is working fine	
		return response.getBody();
	}
	

	@GetMapping("/sample")
	public String sample() {
		return "user consumer is working fine";
	}
	
	
	
	//Getting url from user producer
	private String getUserBaseUrl() {
	
		InstanceInfo instanceInfo = client.getNextServerFromEureka("userproducer", false);
		String baseUrl = instanceInfo.getHomePageUrl();
		
		return baseUrl;
	} 
	

}
